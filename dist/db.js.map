{"version":3,"sources":["../lib/db.js"],"names":["savePromisified","findPromisified","findOrPromisified","updatePromisified","updateNativePromisified","removeNativePromisified","removePromisified","populatePromisified","_load","id","senecaQuery","next","load$","err","data","Error","data$","_getFieldValue","object","field","fieldKey","fieldValue","indexOf","keyRaw","split","length","chain","at","head","value","element","collection","seneca","Promise","resolve","reject","query","Object","assign","make$","save$","dataRaw","where","ret","conditionsTasks","map","cond","runQuery","list$","series","values","listResult","reduce","acc","v","objs","d","e","r","concat","listMerged","uniqBy","listDataRaw","listData","bundle","fields","originalDoc","updatedDoc","f","fieldToUpdate","set","get","merged","mergeWith","origValue","newValue","isArray","isPlainObject","opFields","native$","db","forms","findAndModify","new","result","remove","remove$","keyString","select","subtree","validValues","filter","undefined","toMerge","elements","s"],"mappings":"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","file":"db.js","sourcesContent":["import async from 'async'\nimport lodash from 'lodash'\nimport lodashFp from 'lodash/fp'\n\nfunction _load(id, senecaQuery, next) {\n  senecaQuery.load$(id, (err, data) => {\n    if(err) return next(err)\n    if(!data) return next(new Error('#notFound'))\n\n    next(null, data.data$())\n  })\n\n}\n\nfunction _getFieldValue(object, field) {\n\tlet fieldKey\n\tlet fieldValue\n\n\t//If field name has a period use lodash\n\t//for dot notation access\n\tif(field.indexOf('.') > 0) {\n\t\tlet keyRaw\t= field.split(/[\\s.]+/)\n\n\t\tfieldKey\t\t= keyRaw[keyRaw.length - 1]\n\t\tfieldValue \t=\tlodash.chain(object)\n\t\t\t\t\t\t\t\t\t\t\t\t.at(field)\n\t\t\t\t\t\t\t\t\t\t\t\t.head()\n\t\t\t\t\t\t\t\t\t\t\t\t.value()\n\t} else {\n\t\tfieldKey\t\t= field\n\t\tfieldValue \t= object[field]\n\t}\t\n\n\treturn {fieldKey, fieldValue}\n\n}\n\nexport function savePromisified(element, collection) {\n\n  let seneca = this\n\n  return new Promise ( (resolve, reject) => {\n    const query = Object.assign(seneca.make$(collection), element)\n\n    query.save$( (err, dataRaw) => {\n      if(err) return reject(err)\n\n      const data = dataRaw.data$()\n      resolve({ dataRaw, data })\n    })\n\n  })\n}\n\n\n\nexport function findPromisified(where, collection) {\n\n  let seneca = this\n\n  return new Promise( (resolve, reject) => {\n    let query = seneca.make$(collection)\n\n    query.load$(where, (err, ret) => {\n      if(err) return reject(err)\n\n      const data = ret ? ret.data$() : {}\n      const dataRaw = ret || {}\n\n      resolve({ dataRaw, data })\n    })\n\n  })\n\n}\n\nexport function findOrPromisified(where, collection) {\n\n  let seneca = this\n\n  return new Promise ( (resolve, reject) => {\n    let query = seneca.make$(collection)\n\n    const conditionsTasks = where.map( (cond) => {\n      function runQuery (next) {\n        query.list$(cond, (err, data) => {\n          next(null, data)\n        })\n      }\n\n      return runQuery\n    })\n\n    async.series(conditionsTasks, (err, values) => {\n\n      //Bundle all together the raw and object data\n      //in order to extract them later.\n      const listResult = lodash.reduce(values, (acc, v) => {\n        const objs = v.map( e => Object.assign({}, {d: e.data$()}, {r: e}))\n        return acc.concat(objs)\n      }, [])\n\n      //Merge the list by the id\n      const listMerged = lodash.uniqBy(listResult, 'd.id')\n\n      //Extract the raw and object data\n      const listDataRaw = listMerged.map( r => r.r )\n      const listData = listMerged.map( r => r.d )\n\n      const dataRaw = listDataRaw || {}\n      const data = listData || {}\n\n      resolve({ dataRaw, data })\n    })\n\n  })\n}\n\nexport function updatePromisified(dataRaw, bundle, fields) {\n\n  return new Promise ( (resolve, reject) => {\n\n    const originalDoc = dataRaw.data$()\n\n    const updatedDoc = lodash.reduce(fields, (acc, f) => {\n      const fieldToUpdate = lodashFp.set(f, lodash.get(bundle, f), acc)\n\n      const merged = lodash.mergeWith(originalDoc, fieldToUpdate, (origValue, newValue) => {\n\n        if(f.indexOf('.') > 0) {\n          return Object.assign({}, origValue, newValue)\n        }\n\n        if (lodash.isArray(origValue) || lodash.isPlainObject(origValue)) {\n          return newValue\n        }\n      })\n\n      return merged\n\n    }, {})\n\n    dataRaw.data$(updatedDoc).save$( (err, dataRaw) => {\n      if (err) return reject(err)\n\n      const data = dataRaw.data$()\n      resolve({ dataRaw, data })\n    })\n  })\n}\n\n\nexport function updateNativePromisified(where, opFields, collection) {\n\n  let seneca = this\n\n  return new Promise ( (resolve, reject) => {\n    let query = seneca.make$(collection)\n\n    query.native$( (err, db) => {\n      let forms = db.collection(collection)\n      db.collection(collection).findAndModify(where, [['_id','asc']], opFields, {new: true}, (err, result) => {\n        if(err) return reject(err)\n        resolve(result.value)\n      })\n    })\n\n  })\n}\n\nexport function removeNativePromisified(where, collection) {\n\n  let seneca = this\n\n  return new Promise( (resolve, reject) => {\n    let query = seneca.make$(collection)\n\n    query.native$( (err, db) => {\n      db.collection(collection).remove(where, (err, result) => {\n        if(err) return reject(err)\n        resolve(result.result)\n      })\n    })\n  })\n\n}\n\nexport function removePromisified(where, collection) {\n  let seneca = this\n\n  return new Promise( (resolve, reject) => {\n    let query = seneca.make$(collection)\n\n    query.remove$(where, (err, data) => {\n      if(err) return reject(err)\n      if(!data) return reject(err)\n\n      //It can only remove when value at a time.\n      //So if it wasn't errors it means it deleted one element.\n      resolve(1)\n    })\n\n  })\n\n}\n\nexport function populatePromisified(object, keyString, select, collection) {\n\n  let seneca = this\n\n  return new Promise( (resolve, reject) => {\n\n    let query = seneca.make$(collection)\n\n    //Lodash 'at' function always returns an array.\n    //That's why head is invoked, it gets the first\n    //element of the array, in fact, the only one.\n    const subtree = lodash.chain(object)\n                          .at(keyString)\n                          .head()\n                          .value()\n\n    async.map(subtree, (id, next) => {\n       return _load(id, query, next)\n      }, (err, values) => {\n\n        const validValues = values.filter( (v) => v != undefined)\n\n        let toMerge = validValues\n\n        if(select.length > 0) {\n\n          toMerge = lodash.reduce(validValues, (result, v) => {\n\n            let elements = lodash.reduce(select, (acc, s) => {\n              let {fieldKey, fieldValue} = _getFieldValue(v, s)\n              return lodashFp.set(fieldKey, fieldValue, acc)\n            }, {})\n\n            return result.concat(elements)\n\n          }, [])\n        }\n\n        resolve(lodashFp.set(keyString, toMerge, object))\n      } \n    )\n  })\n}\n\n\n\nexport default {\n  savePromisified,\n  findPromisified,\n  findOrPromisified,\n  updatePromisified,\n  updateNativePromisified,\n  removePromisified,\n  removeNativePromisified,\n  populatePromisified\n}\n"]}
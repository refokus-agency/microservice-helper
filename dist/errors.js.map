{"version":3,"sources":["../lib/errors.js"],"names":["handle","errors","require","id","err","key","replace","undefined","e","Error","code","stack","isJoi","handleJoi","oldError","joiError","badParams","receivedMessage","_object","details","forEach","detail","push","path","msg","message","type"],"mappings":";;;;;QAegBA,M,GAAAA,M;;AAVhB;;;;;;AAEA,IAAMC,SAASC,0CAAf;;AAEA;;;;;;AATA;;;;;AAeO,SAASF,MAAT,CAAiBG,EAAjB,EAAqBC,GAArB,EAA0B;AAC/B,MAAIC,MAAMF,GAAGG,OAAH,CAAW,IAAX,EAAiB,EAAjB,CAAV;;AAEA,MAAIL,OAAOI,GAAP,MAAgBE,SAApB,EAA+B,OAAOP,OAAO,cAAP,EAAuBI,GAAvB,CAAP;;AAE/B,MAAII,IAAI,IAAIC,KAAJ,CAAUR,OAAOI,GAAP,CAAV,CAAR;AACAG,IAAEE,IAAF,SAAaL,GAAb;;AAEA,MAAID,GAAJ,EAAS;AACPI,MAAEG,KAAF,GAAUP,IAAIO,KAAd;;AAEA,QAAIP,IAAIQ,KAAR,EAAe;AACbC,gBAAUT,GAAV,EAAeI,CAAf;AACD,KAFD,MAEO;AACLA,QAAEM,QAAF,GAAaV,GAAb;AACD;AACF;;AAED,SAAOI,CAAP;AACD;;AAED,SAASK,SAAT,CAAoBE,QAApB,EAA8BP,CAA9B,EAAiC;AAC/BA,IAAEQ,SAAF,GAAc,EAAd;AACAR,IAAES,eAAF,GAAoBF,SAASG,OAA7B;AACAH,WAASI,OAAT,CAAiBC,OAAjB,CAAyB,UAACC,MAAD,EAAY;AACnCb,MAAEQ,SAAF,CAAYM,IAAZ,CACE;AACEjB,WAAKgB,OAAOE,IADd;AAEEC,WAAKH,OAAOI,OAFd;AAGEC,YAAML,OAAOK;AAHf,KADF;AAMD,GAPD;AAQD","file":"errors.js","sourcesContent":["/**\n * Error handler module. In order to work , the project must have an error directory in the root folder.\n * @module\n *\n */\nimport root from 'app-root-path'\n\nconst errors = require(`${root}/errors`)\n\n/**\n * Generate custom errors.\n * @param {String} id Id to be shown.\n * @param {Error} [err] Error to be added as oldError in the return object.\n * @returns {Error} Custom Error instance.\n */\nexport function handle (id, err) {\n  let key = id.replace(/^#/, '')\n\n  if (errors[key] === undefined) return handle('unknownError', err)\n\n  let e = new Error(errors[key])\n  e.code = `#${key}`\n\n  if (err) {\n    e.stack = err.stack\n\n    if (err.isJoi) {\n      handleJoi(err, e)\n    } else {\n      e.oldError = err\n    }\n  }\n\n  return e\n}\n\nfunction handleJoi (joiError, e) {\n  e.badParams = []\n  e.receivedMessage = joiError._object\n  joiError.details.forEach((detail) => {\n    e.badParams.push(\n      {\n        key: detail.path,\n        msg: detail.message,\n        type: detail.type\n      })\n  })\n}\n"]}
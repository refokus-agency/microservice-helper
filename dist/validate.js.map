{"version":3,"sources":["../lib/validate.js"],"names":["validatePromisified","validateElementPromisified","JoiObjectId","_joiValidator","type","objectToValidate","schema","Promise","resolve","reject","validate","abortEarly","err","result","elementToValidate","v"],"mappings":";;;;;QAmBgBA,mB,GAAAA,mB;QAeAC,0B,GAAAA,0B;;AA9BhB;;;;AACA;;;;;;AALA;;;;AAOA,IAAMC,cAAc,yCAApB;;AAEA,SAASC,aAAT,CAAwBC,IAAxB,EAA8B;AAC5B,MAAIA,SAAS,UAAb,EAAyB,OAAOF,WAAP;AACzB,MAAI,OAAO,cAAIE,IAAJ,CAAP,KAAqB,UAAzB,EAAqC,OAAO,cAAIA,IAAJ,CAAP;AACtC;AACD;;;;;;AAMO,SAASJ,mBAAT,CAA8BK,gBAA9B,EAAgDC,MAAhD,EAAwD;AAC7D,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,QAAJ,CAAaL,gBAAb,EAA+BC,MAA/B,EAAuC,EAACK,YAAY,KAAb,EAAvC,EAA4D,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC3E,UAAID,GAAJ,EAAS,OAAOH,OAAOG,GAAP,CAAP;;AAETJ,cAAQK,MAAR;AACD,KAJD;AAKD,GANM,CAAP;AAOD;AACD;;;;;;AAMO,SAASZ,0BAAT,CAAqCa,iBAArC,EAAwDV,IAAxD,EAA8D;AACnE,SAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIM,IAAIZ,cAAcC,IAAd,CAAR;;AAEA,kBAAIM,QAAJ,CAAaI,iBAAb,EAAgCC,GAAhC,EAAqC,EAACJ,YAAY,KAAb,EAArC,EAA0D,UAACC,GAAD,EAAMC,MAAN,EAAiB;AACzE,UAAID,GAAJ,EAAS,OAAOH,OAAOG,GAAP,CAAP;;AAETJ,cAAQK,MAAR;AACD,KAJD;AAKD,GARM,CAAP;AASD","file":"validate.js","sourcesContent":["/**\n * Used to validate a basic type or schema\n * @module\n */\nimport Joi from 'joi'\nimport JoiObjectIdModule from 'joi-objectid'\n\nconst JoiObjectId = JoiObjectIdModule(Joi)\n\nfunction _joiValidator (type) {\n  if (type === 'ObjectId') return JoiObjectId\n  if (typeof Joi[type] === 'function') return Joi[type]\n}\n/**\n *\n * @param {Object} objectToValidate\n * @param {Object} schema - Can be a joi type object or a plain object where every key is assigned a joi type object\n * @returns {Promise}\n */\nexport function validatePromisified (objectToValidate, schema) {\n  return new Promise((resolve, reject) => {\n    Joi.validate(objectToValidate, schema, {abortEarly: false}, (err, result) => {\n      if (err) return reject(err)\n\n      resolve(result)\n    })\n  })\n}\n/**\n *\n * @param {Object} elementToValidate\n * @param {String} type - Any of the classic basic primitive types\n * @returns {Promise}\n */\nexport function validateElementPromisified (elementToValidate, type) {\n  return new Promise((resolve, reject) => {\n    let v = _joiValidator(type)\n\n    Joi.validate(elementToValidate, v(), {abortEarly: false}, (err, result) => {\n      if (err) return reject(err)\n\n      resolve(result)\n    })\n  })\n}\n"]}
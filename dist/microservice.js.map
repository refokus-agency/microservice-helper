{"version":3,"sources":["../lib/microservice.js"],"names":["doFn","$pipePromise","fnc","state","critical","promise","Promise","resolve","reject","fncCalled","then","_successHandler","fncState","catch","_errorHandler","error","nState","Object","assign","process","env","NODE_ENV","DEBUG","console","warn","scope","$pipe","_generateState","seneca","msg","notAllowedKeys","nMsg","key","indexOf","done","returnData","tryFnc","finalState","ok","data","err"],"mappings":"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","file":"microservice.js","sourcesContent":["/**\n *  Microservices pipeline.\n * @module\n */\n\n// NOTE: we need to remove no-labels for this project, try to avoid this kind of fixes\n/* eslint-disable no-labels */\n\nimport { printModule } from './debug'\n\nclass $pipePromise {\n  /**\n   * Basic Promise object that is transported across de pipeline\n   * @param {Function} fnc - Function to execute in the pipeline\n   * @param {Object} state - Current state of the App\n   * @param {boolean} [critical] - When $critical is present, an exception stop de pipe execution\n   */\n  constructor (fnc, state, critical) {\n    this.state = state\n    this.promise = new Promise((resolve, reject) => {\n      try {\n        const fncCalled = fnc(this.state)\n\n        if (!(typeof fncCalled.then === 'function')) {\n          return this._successHandler(fncCalled, resolve)\n        }\n\n        return fncCalled.then(fncState => {\n          return this._successHandler(fncState, resolve)\n        })\n          .catch(error => {\n            return this._errorHandler(error, critical, reject, resolve)\n          })\n      } catch (error) {\n        return this._errorHandler(error, critical, reject, resolve)\n      }\n    })\n  }\n\n  _successHandler (nState, resolve) {\n    this.state = Object.assign({}, this.state, nState)\n    return resolve(this.state)\n  }\n\n  _errorHandler (error, critical, reject, resolve) {\n    if (critical || this.critical) {\n      this.critical = true\n      return reject(error)\n    }\n    if (process.env.NODE_ENV === 'production' || process.env.DEBUG) console.warn(error)\n    this.state = Object.assign({}, this.state, {error})\n    return resolve(this.state)\n  }\n\n  then (fnc, critical) {\n    this.promise = this.promise.then(fnc)\n      .then(nState => {\n        this.state = Object.assign({}, this.state, nState)\n\n        return this.state\n      })\n      .catch(error => {\n        if (critical || this.critical) {\n          this.critical = true\n          throw error\n        }\n        if (process.env.NODE_ENV === 'production' || process.env.DEBUG) console.warn(error)\n        this.state = Object.assign({}, this.state, {error})\n        return this.state\n      })\n\n    return this\n  }\n\n  debug (scope = 'default') {\n    return this.then(printModule(scope))\n  }\n}\n/**\n *\n * @param {Function} fnc Function to execute in the pipeline.\n * @param {Object} state Current state of the App.\n * @param {boolean} [critical] When $critical is present, an exception stop de pipe execution.\n * @returns {$pipePromise}\n */\nfunction $pipe (fnc, state, critical) {\n  return new $pipePromise(fnc, state, critical)\n}\n\nfunction _generateState (seneca, msg) {\n  const notAllowedKeys = ['caller$', 'meta$', 'plugin$', 'tx$']\n  let nMsg = {}\n\n  for (let key in msg) {\n    if (notAllowedKeys.indexOf(key) > -1) continue\n    nMsg[key] = msg[key]\n  }\n\n  return Object.assign({}, {seneca}, nMsg)\n}\n/**\n * Wrapper function. If all is ok, the result will be { ok : true , data : {result} }\n * When is an error in business logic, the result will be { ok : false, err : Error }.\n * @param {Function} fnc Command function that must be executed.\n * @returns {Object}\n */\nexport function doFn (fnc) {\n  return function (msg, done) {\n    const state = _generateState(this, msg)\n\n    let returnData = {}\n\n    tryFnc:\n      try {\n        const finalState = fnc($pipe, true, state)\n\n        if (!(finalState instanceof $pipePromise)) {\n          returnData = {ok: true, data: finalState}\n          break tryFnc\n        }\n\n        finalState.promise.then(finalState => {\n          done(null, {ok: true, data: finalState})\n        })\n          .catch(err => {\n            if (process.env.NODE_ENV === 'production' || process.env.DEBUG) console.error(err)\n            done(null, {ok: false, error: err})\n          })\n        return\n      } catch (err) {\n        returnData = {ok: false, error: err}\n      }\n\n    done(null, returnData)\n  }\n}\n"]}
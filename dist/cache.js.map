{"version":3,"sources":["../lib/cache.js"],"names":["addKey","getValue","removeKey","key","value","options","timeout","redisClient","createClient","redisValue","JSON","stringify","Promise","resolve","reject","set","err","quit","get","reply","console","log","parse","del"],"mappings":";;;;;QAcgBA,M,GAAAA,M;QAoBAC,Q,GAAAA,Q;QAuBAC,S,GAAAA,S;;AAtDhB;;;;;;AAEA;;;;;;;;;AASO,SAASF,MAAT,OAAqD;AAAA,MAAnCG,GAAmC,QAAnCA,GAAmC;AAAA,MAA9BC,KAA8B,QAA9BA,KAA8B;AAAA,MAAvBC,OAAuB,QAAvBA,OAAuB;AAAA,0BAAdC,OAAc;AAAA,MAAdA,OAAc,gCAAJ,CAAI;;AAC1D,MAAMC,cAAc,gBAAMC,YAAN,CAAmBH,OAAnB,CAApB;AACA,MAAMI,aAAaC,KAAKC,SAAL,CAAeP,KAAf,CAAnB;;AAEA,SAAO,IAAIQ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCP,gBAAYQ,GAAZ,CAAgBZ,GAAhB,EAAqBM,UAArB,EAAiC,IAAjC,EAAuCH,OAAvC,EAAgD,UAACU,GAAD,EAAS;AACvDT,kBAAYU,IAAZ;;AAEA,UAAID,GAAJ,EAASF,OAAOE,GAAP;AACTH;AACD,KALD;AAMD,GAPM,CAAP;AAQD;;AAED;;;;;;AA5BA;;;AAkCO,SAASZ,QAAT,QAAmC;AAAA,MAAfE,GAAe,SAAfA,GAAe;AAAA,MAAVE,OAAU,SAAVA,OAAU;;AACxC,MAAME,cAAc,gBAAMC,YAAN,CAAmBH,OAAnB,CAApB;;AAEA,SAAO,IAAIO,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCP,gBAAYW,GAAZ,CAAgBf,GAAhB,EAAqB,UAACa,GAAD,EAAMG,KAAN,EAAgB;AACnCZ,kBAAYU,IAAZ;;AAEA,UAAID,GAAJ,EAAS;AACPI,gBAAQC,GAAR,CAAYL,GAAZ;AACAF,eAAOE,GAAP;AACD;;AAEDH,cAAQH,KAAKY,KAAL,CAAWH,KAAX,CAAR;AACD,KATD;AAUD,GAXM,CAAP;AAYD;;AAED;;;;;;AAMO,SAASjB,SAAT,QAAoC;AAAA,MAAfC,GAAe,SAAfA,GAAe;AAAA,MAAVE,OAAU,SAAVA,OAAU;;AACzC,MAAME,cAAc,gBAAMC,YAAN,CAAmBH,OAAnB,CAApB;;AAEA,SAAO,IAAIO,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCP,gBAAYgB,GAAZ,CAAgBpB,GAAhB,EAAqB,UAACa,GAAD,EAAMG,KAAN,EAAgB;AACnCZ,kBAAYU,IAAZ;;AAEA,UAAID,GAAJ,EAAS;AACPF,eAAOE,GAAP;AACD;AACDH,cAAQH,KAAKY,KAAL,CAAWH,KAAX,CAAR;AACD,KAPD;AAQD,GATM,CAAP;AAUD","file":"cache.js","sourcesContent":["/**\n * @module\n */\nimport redis from 'redis'\n\n/**\n * Add key to Redis cache.\n * IMPORTANT!\n * The key must include correct namespace to prevent data collisions\n *\n * @param {String} key Key to store\n * @param {String} value Value to store\n * @param {int} timeout timeout to expire keys\n */\nexport function addKey ({key, value, options, timeout = 0}) {\n  const redisClient = redis.createClient(options)\n  const redisValue = JSON.stringify(value)\n\n  return new Promise((resolve, reject) => {\n    redisClient.set(key, redisValue, 'EX', timeout, (err) => {\n      redisClient.quit()\n\n      if (err) reject(err)\n      resolve()\n    })\n  })\n}\n\n/**\n * Get value from Redis cache.\n *\n * @param {String}  Key to obtain value.\n * @return {Object}\n */\nexport function getValue ({key, options}) {\n  const redisClient = redis.createClient(options)\n\n  return new Promise((resolve, reject) => {\n    redisClient.get(key, (err, reply) => {\n      redisClient.quit()\n\n      if (err) {\n        console.log(err)\n        reject(err)\n      }\n\n      resolve(JSON.parse(reply))\n    })\n  })\n}\n\n/**\n * Remove key from Redis cache.\n *\n * @param {String} key Key to remove.\n * @return {Int}\n */\nexport function removeKey ({key, options}) {\n  const redisClient = redis.createClient(options)\n\n  return new Promise((resolve, reject) => {\n    redisClient.del(key, (err, reply) => {\n      redisClient.quit()\n\n      if (err) {\n        reject(err)\n      }\n      resolve(JSON.parse(reply))\n    })\n  })\n}\n"]}
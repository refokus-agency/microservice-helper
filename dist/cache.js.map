{"version":3,"sources":["../lib/cache.js"],"names":["addKey","getValue","removeKey","key","value","timeout","redisClient","createClient","redisValue","JSON","stringify","set","Promise","resolve","reject","get","err","reply","parse","del"],"mappings":";;;;;QAcgBA,M,GAAAA,M;QAaAC,Q,GAAAA,Q;QAmBAC,S,GAAAA,S;;AA3ChB;;;;;;AAEA;;;;;;;;;AASO,SAASF,MAAT,CAAiBG,GAAjB,EAAsBC,KAAtB,EAA0C;AAAA,MAAbC,OAAa,uEAAH,CAAG;;AAC/C,MAAMC,cAAc,gBAAMC,YAAN,EAApB;AACA,MAAMC,aAAaC,KAAKC,SAAL,CAAeN,KAAf,CAAnB;;AAEAE,cAAYK,GAAZ,CAAgBR,GAAhB,EAAqBK,UAArB,EAAiC,IAAjC,EAAuCH,OAAvC;AACD;;AAED;;;;;;AArBA;;;AA2BO,SAASJ,QAAT,CAAmBE,GAAnB,EAAwB;AAC7B,MAAMG,cAAc,gBAAMC,YAAN,EAApB;;AAEA,SAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCR,gBAAYS,GAAZ,CAAgBZ,GAAhB,EAAqB,UAACa,GAAD,EAAMC,KAAN,EAAgB;AACnC,UAAID,GAAJ,EAAS;AACPF,eAAOE,GAAP;AACD;AACDH,cAAQJ,KAAKS,KAAL,CAAWD,KAAX,CAAR;AACD,KALD;AAMD,GAPM,CAAP;AAQD;;AAED;;;;;;AAMO,SAASf,SAAT,CAAoBC,GAApB,EAAyB;AAC9B,MAAMG,cAAc,gBAAMC,YAAN,EAApB;;AAEA,SAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCR,gBAAYa,GAAZ,CAAgBhB,GAAhB,EAAqB,UAACa,GAAD,EAAMC,KAAN,EAAgB;AACnC,UAAID,GAAJ,EAAS;AACPF,eAAOE,GAAP;AACD;AACDH,cAAQJ,KAAKS,KAAL,CAAWD,KAAX,CAAR;AACD,KALD;AAMD,GAPM,CAAP;AAQD","file":"cache.js","sourcesContent":["/**\n * @module\n */\nimport redis from 'redis'\n\n/**\n * Add key to Redis cache.\n * IMPORTANT!\n * The key must include correct namespace to prevent data collisions\n *\n * @param {String} key Key to store\n * @param {String} value Value to store\n * @param {int} timeout timeout to expire keys\n */\nexport function addKey (key, value, timeout = 0) {\n  const redisClient = redis.createClient()\n  const redisValue = JSON.stringify(value)\n\n  redisClient.set(key, redisValue, 'EX', timeout)\n}\n\n/**\n * Get value from Redis cache.\n *\n * @param {String}  Key to obtain value.\n * @return {Object}\n */\nexport function getValue (key) {\n  const redisClient = redis.createClient()\n\n  return new Promise((resolve, reject) => {\n    redisClient.get(key, (err, reply) => {\n      if (err) {\n        reject(err)\n      }\n      resolve(JSON.parse(reply))\n    })\n  })\n}\n\n/**\n * Remove key from Redis cache.\n *\n * @param {String} key Key to remove.\n * @return {Int}\n */\nexport function removeKey (key) {\n  const redisClient = redis.createClient()\n\n  return new Promise((resolve, reject) => {\n    redisClient.del(key, (err, reply) => {\n      if (err) {\n        reject(err)\n      }\n      resolve(JSON.parse(reply))\n    })\n  })\n}\n"]}